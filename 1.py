import math

def matrix_multiply(A, B):
    return [A[0] * B[0] + A[1] * B[1], A[0] * B[2] + A[1] * B[3],
            A[2] * B[0] + A[3] * B[1], A[2] * B[1] + A[3] * B[3]]

def matrix_summ(A, B):
    return [A[0] + B[0], A[1] + B[1],
            A[2] + B[2], A[3] + B[3]]

def matrix_pow(A, n):
    C = A
    for i in range(0, n):
        C = matrix_multiply(C, C)
    return C

def largest_power_of_2(n):
    if n > 0:
        return 1 << (n.bit_length() - 1)
    else:
        raise ValueError("cant calculate power of 2 from <= 0")
    
def fib(n):
    if n == 0:
        return 0

    if n == 1:
        return 1
    
    A = [0, 1, 1, 1]

    C = None
    y = abs(n)

    while y > 1:
        value = largest_power_of_2(y)
        y -= value

        D = matrix_pow(A, int(math.log(value, 2)))
        
        if not C:
            C = D
        else:
            C = matrix_multiply(C, D)

    if y != 0:
        C = matrix_multiply(C, A)

    return C[1] * (-1 if n < 0 and n & 1 == 0 else 1)

assert fib(-6) == -8
assert fib(0) == 0
assert fib(1) == 1
assert fib(2) == 1
assert fib(3) == 2
assert fib(16) == 987
assert fib(17) == 1597
assert fib(32) == 2178309
assert fib(81) == 37889062373143906
assert fib(101) == 573147844013817084101
assert fib(10001) == 54438373113565281338734260993750380135389184554695967026247715841208582865622349017083051547938960541173822675978026317384359584751116241439174702642959169925586334117906063048089793531476108466259072759367899150677960088306597966641965824937721800381441158841042480997984696487375337180028163763317781927941101369262750979509800713596718023814710669912644214775254478587674568963808002962265133111359929762726679441400101575800043510777465935805362502461707918059226414679005690752321895868142367849593880756423483754386342639635970733756260098962462668746112041739819404875062443709868654315626847186195620146126642232711815040367018825205314845875817193533529827837800351902529239517836689467661917953884712441028463935449484614450778762529520961887597272889220768537396475869543159172434537193611263743926337313005896167248051737986306368115003088396749587102619524631352447499505204198305187168321623283859794627245919771454628218399695789223798912199431775469705216131081096559950638297261253848242007897109054754028438149611930465061866170122983288964352733750792786069444761853525144421077928045979904561298129423809156055033032338919609162236698759922782923191896688017718575555520994653320128446502371153715141749290913104897203455577507196645425232862022019506091483585223882711016708433051169942115775151255510251655931888164048344129557038825477521111577395780115868397072602565614824956460538700280331311861485399805397031555727529693399586079850381581446276433858828529535803424850845426446471681531001533180479567436396815653326152509571127480411928196022148849148284389124178520174507305538928717857923509417743383331506898239354421988805429332440371194867215543576548565499134519271098919802665184564927827827212957649240235507595558205647569365394873317659000206373126570643509709482649710038733517477713403319028105575667931789470024118803094604034362953471997461392274791549730356412633074230824051999996101549784667340458326852960388301120765629245998136251652347093963049734046445106365304163630823669242257761468288461791843224793434406079917883360676846711185597501
